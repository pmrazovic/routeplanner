package com.sparsity.routeplanner.vrpdomain;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardmediumsoftlong.HardMediumSoftLongScoreHolder


import com.sparsity.routeplanner.vrpdomain.Depot;
import com.sparsity.routeplanner.vrpdomain.Location;
import com.sparsity.routeplanner.vrpdomain.Vehicle;
import com.sparsity.routeplanner.vrpdomain.VehicleRoutingSolution;
import com.sparsity.routeplanner.vrpdomain.Customer;

global HardMediumSoftLongScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "vehicleCapacity"
    when
        $vehicle : Vehicle(dummy == false, $capacity : capacity)
        accumulate(
            Customer(
                vehicle == $vehicle,
                $demand : demand);
            $demandTotal : sum($demand);
            $demandTotal > $capacity
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $capacity - $demandTotal);
end


rule "vehicleMaxDistance"
    when
        $vehicle : Vehicle(dummy == false, $maxDistance : maxDistance)
        $lastCustomer : Customer(previousStandstill != null, vehicle == $vehicle)
        not Customer(previousStandstill == $lastCustomer)
        accumulate(
            Customer(
                vehicle == $vehicle,
                $distanceFromPreviousStandstill : distanceFromPreviousStandstill);
            $distanceTotal : sum($distanceFromPreviousStandstill);
            $distanceTotal + $lastCustomer.getDistanceTo($vehicle) > $maxDistance
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $maxDistance - $distanceTotal -  $lastCustomer.getDistanceTo($vehicle));
end

// ############################################################################
// Medium constraints
// ############################################################################

rule "dummyVehicleScore"
    when
        $vehicle : Vehicle(dummy == true)
        $customer : Customer(vehicle == $vehicle)
    then
        scoreHolder.addMediumConstraintMatch(kcontext, - $customer.getPriority());
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "distanceToPreviousStandstill"
    when
        $customer : Customer(previousStandstill != null, $distanceFromPreviousStandstill : distanceFromPreviousStandstill)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $distanceFromPreviousStandstill);
end

rule "distanceFromLastCustomerToDepot"
    when
        $customer : Customer(previousStandstill != null)
        not Customer(previousStandstill == $customer)
    then
        Vehicle vehicle = $customer.getVehicle();
        scoreHolder.addSoftConstraintMatch(kcontext, - $customer.getDistanceTo(vehicle));
end

//rule "highPriorityCustomers"
//    when
//        $customer : Customer(previousStandstill != null, $visitIndex : visitIndex, priority > 0)
//    then
//        scoreHolder.addSoftConstraintMatch(kcontext, - $visitIndex * 50);
//end